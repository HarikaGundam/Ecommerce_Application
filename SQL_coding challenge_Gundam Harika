--creating database
create database Ecom

use Ecom

--customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
	address VARCHAR(255) NOT NULL --address is not mentioned to create table but in the table created by them have included the adress so i have created
);


--products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT,
    stockQuantity INT NOT NULL
);


--cart table
CREATE TABLE cart (
    cart_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);


--orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    shipping_address VARCHAR(255) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

--order_items table
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
	itemAmount INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

--inserting values in the customers table
INSERT INTO customers (customer_id, name, email, address,password)
VALUES 
(1, 'John Doe', 'johndoe@example.com', '123 Main St, City','John11'),
(2, 'Jane Smith', 'janesmith@example.com', '456 Elm St, Town','jane22'),
(3, 'Robert Johnson', 'robert@example.com', '789 Oak St, Village','Robert33'),
(4, 'Sarah Brown', 'sarah@example.com', '101 Pine St, Suburb','Sarah44'),
(5, 'David Lee', 'david@example.com', '234 Cedar St, District','David55'),
(6, 'Laura Hall', 'laura@example.com', '567 Birch St, County','Laura66'),
(7, 'Michael Davis', 'michael@example.com', '890 Maple St, State','Michael77'),
(8, 'Emma Wilson', 'emma@example.com', '321 Redwood St, Country','Emma88'),
(9, 'William Taylor', 'william@example.com', '432 Spruce St, Province','William99'),
(10, 'Olivia Adams', 'olivia@example.com', '765 Fir St, Territory','Olivia100');


--inserting values in the products table
INSERT INTO products (product_id, name, description, price, stockQuantity)
VALUES 
(1, 'Laptop', 'High-performance laptop', 800.00, 10),
(2, 'Smartphone', 'Latest smartphone', 600.00, 15),
(3, 'Tablet', 'Portable tablet', 300.00, 20),
(4, 'Headphones', 'Noise-canceling', 150.00, 30),
(5, 'TV', '4K Smart TV', 900.00, 5),
(6, 'Coffee Maker', 'Automatic coffee maker', 50.00, 25),
(7, 'Refrigerator', 'Energy-efficient', 700.00, 10),
(8, 'Microwave Oven', 'Countertop microwave', 80.00, 15),
(9, 'Blender', 'High-speed blender', 70.00, 20),
(10, 'Vacuum Cleaner', 'Bagless vacuum cleaner', 120.00, 10);


--inserting values in the cart table
INSERT INTO cart (cart_id, customer_id, product_id, quantity)
VALUES 
(1, 1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 3),
(4, 3, 4, 4),
(5, 3, 5, 2),
(6, 4, 6, 1),
(7, 5, 1, 1),
(8, 6, 10, 2),
(9, 6, 9, 3),
(10, 7, 7, 2);


--inserting values in the orders table
INSERT INTO orders (order_id, customer_id, order_date, total_price, shipping_address)
VALUES 
(1, 1, '2023-01-05', 1200.00, '123 Main St, City'),
(2, 2, '2023-02-10', 900.00, '456 Elm St, Town'),
(3, 3, '2023-03-15', 300.00, '789 Oak St, Village'),
(4, 4, '2023-04-20', 150.00, '101 Pine St, Suburb'),
(5, 5, '2023-05-25', 1800.00, '234 Cedar St, District'),
(6, 6, '2023-06-30', 400.00, '567 Birch St, County'),
(7, 7, '2023-07-05', 700.00, '890 Maple St, State'),
(8, 8, '2023-08-10', 160.00, '321 Redwood St, Country'),
(9, 9, '2023-09-15', 140.00, '432 Spruce St, Province'),
(10, 10, '2023-10-20', 1400.00, '765 Fir St, Territory');


--inserting values in the order_items table
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, itemAmount)
VALUES 
(1, 1, 1, 2, 1600.00),
(2, 1, 3, 1, 300.00),
(3, 2, 2, 3, 1800.00),
(4, 3, 5, 2, 1800.00),
(5, 4, 4, 4, 600.00),
(6, 4, 6, 1, 50.00),
(7, 5, 1, 1, 800.00),
(8, 5, 2, 2, 1200.00),
(9, 6, 10, 2, 240.00),
(10, 6, 9, 3, 210.00);


--printing all the contents
select * from customers
select * from products
select * from cart
select * from orders
select * from order_items



--queries 

--1. update refrigerator product price to 800

UPDATE products
SET price = 800
WHERE name = 'Refrigerator';

--2. Remove all cart items for a specific customer.

DELETE FROM cart
WHERE customer_id = 2;  -- Replace [specific_customer_id] with the actual customer ID.

--3.Retrieve Products Priced Below $100.

SELECT * 
FROM products
WHERE price < 100;

--4.Find Products with Stock Quantity Greater Than 5.

SELECT * 
FROM products
WHERE stockQuantity > 5;


--5.Retrieve Orders with Total Amount Between $500 and $1000.

SELECT * 
FROM orders
WHERE total_price BETWEEN 500 AND 1000;


--6.Find Products which name end with letter ‘r’.

SELECT * 
FROM products
WHERE name LIKE '%r';


--7.Retrieve Cart Items for Customer 5.

SELECT * 
FROM cart
WHERE customer_id = 5;


--8.Find Customers Who Placed Orders in 2023.

SELECT DISTINCT customers.*
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
WHERE YEAR(orders.order_date) = 2023;


--9.Determine the Minimum Stock Quantity for Each Product Category.

SELECT MIN(stockQuantity) AS min_stock_quantity
FROM products;


--10.Calculate the Total Amount Spent by Each Customer.

SELECT o.customer_id, SUM(o.total_price) AS total_spent
FROM orders o
GROUP BY o.customer_id;


--11.Find the Average Order Amount for Each Customer.

SELECT o.customer_id, AVG(o.total_price) AS average_order_amount
FROM orders o
GROUP BY o.customer_id;


--12.Count the Number of Orders Placed by Each Customer.

SELECT o.customer_id, COUNT(o.order_id) AS order_count
FROM orders o
GROUP BY o.customer_id;


--13.Find the Maximum Order Amount for Each Customer

SELECT o.customer_id, MAX(o.total_price) AS max_order_amount
FROM orders o
GROUP BY o.customer_id;

--14.. Get Customers Who Placed Orders Totaling Over $1000.

SELECT o.customer_id, SUM(o.total_price) AS total_spent
FROM orders o
GROUP BY o.customer_id
HAVING SUM(o.total_price) > 1000;

--15.Subquery to Find Products Not in the Cart.

SELECT *
FROM products
WHERE product_id NOT IN (
    SELECT product_id
    FROM cart
);


--16.Subquery to Find Customers Who Haven't Placed Orders

SELECT *
FROM customers
WHERE NOT EXISTS (
    SELECT 1
    FROM orders
    WHERE orders.customer_id = customers.customer_id
);


--17.Subquery to Calculate the Percentage of Total Revenue for a Product

SELECT product_id,name,price,
    (SELECT SUM(itemAmount) FROM order_items WHERE product_id = products.product_id) AS product_revenue,
    (SELECT SUM(itemAmount) FROM order_items) AS total_revenue,
    ((SELECT SUM(itemAmount) FROM order_items WHERE product_id = products.product_id) / (SELECT SUM(itemAmount) FROM order_items) * 100) AS revenue_percentage
FROM products;


--18.Subquery to Find Products with Low Stock

SELECT *
FROM products
WHERE stockQuantity < 5;


--19.Subquery to Find Customers Who Placed High-Value Orders.

SELECT *
FROM customers
WHERE customer_id IN (
    SELECT customer_id
    FROM orders
    WHERE total_price > 1000
);
